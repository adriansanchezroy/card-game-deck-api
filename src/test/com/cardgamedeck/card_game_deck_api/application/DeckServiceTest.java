package com.cardgamedeck.card_game_deck_api.application;

import com.cardgamedeck.card_game_deck_api.application.impl.DeckService;
import com.cardgamedeck.card_game_deck_api.domain.model.Deck;
import com.cardgamedeck.card_game_deck_api.domain.repository.IDeckRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class DeckServiceTest {

    @Mock
    private IDeckRepository deckRepository;

    @InjectMocks
    private DeckService deckService;

    private UUID testDeckId;
    private Deck testDeck;

    @BeforeEach
    void setUp() {
        testDeckId = UUID.randomUUID();
        testDeck = new Deck("Test Deck");

        // Use reflection to set the ID since it's generated by JPA
        try {
            java.lang.reflect.Field idField = testDeck.getClass().getSuperclass().getDeclaredField("id");
            idField.setAccessible(true);
            idField.set(testDeck, testDeckId);
        } catch (Exception e) {
            fail("Failed to set up test deck: " + e.getMessage());
        }
    }

    @Test
    void createDeck_WithValidName_ShouldReturnCreatedDeck() {
        // Given
        String deckName = "Standard Deck";
        Deck newDeck = new Deck(deckName);
        when(deckRepository.save(any(Deck.class))).thenReturn(newDeck);

        // When
        Deck result = deckService.createDeck(deckName);

        // Then
        assertNotNull(result);
        assertEquals(deckName, result.getName());
        assertEquals(52, result.getCards().size());
        verify(deckRepository, times(1)).save(any(Deck.class));
    }

    @Test
    void findDeckById_WithExistingId_ShouldReturnDeck() {
        // Given
        when(deckRepository.findById(testDeckId)).thenReturn(Optional.of(testDeck));

        // When
        Optional<Deck> result = deckService.findById(testDeckId);

        // Then
        assertTrue(result.isPresent());
        assertEquals(testDeckId, result.get().getId());
        verify(deckRepository, times(1)).findById(testDeckId);
    }

    @Test
    void findDeckById_WithNonExistingId_ShouldReturnEmpty() {
        // Given
        UUID nonExistingId = UUID.randomUUID();
        when(deckRepository.findById(nonExistingId)).thenReturn(Optional.empty());

        // When
        Optional<Deck> result = deckService.findById(nonExistingId);

        // Then
        assertFalse(result.isPresent());
        verify(deckRepository, times(1)).findById(nonExistingId);
    }

    @Test
    void findAllDecks_ShouldReturnAllDecks() {
        // Given
        List<Deck> deckList = new ArrayList<>();
        deckList.add(testDeck);
        deckList.add(new Deck("Another Deck"));
        when(deckRepository.findAll()).thenReturn(deckList);

        // When
        List<Deck> result = deckService.findAll();

        // Then
        assertNotNull(result);
        assertEquals(2, result.size());
        verify(deckRepository, times(1)).findAll();
    }
}